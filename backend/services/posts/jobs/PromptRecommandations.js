const cron = require("node-cron");
const axios = require("axios");
const Recommandation = require("../models/Recommandation");
const Post = require("../models/Post");

// Fonction utilitaire pour comparer les dates (ignorer l'heure)
function estDateDuJour(date) {
    const aujourdHui = new Date();
    aujourdHui.setHours(0, 0, 0, 0);
    const dateComparee = new Date(date);
    dateComparee.setHours(0, 0, 0, 0);
    return dateComparee.getTime() === aujourdHui.getTime();
}

// T√¢che cron : toutes les heures
cron.schedule("0 * * * *", async () => {
    console.log("‚è∞ [CRON] Lancement de la g√©n√©ration des recommandations...");

    try {
        console.log("üì° Connexion au service utilisateur...");
        const response = await axios.post(`${process.env.PROXY_GATEWAY}/api/users/login`,
            { email: "samir@gmail.com", password: "password" },
            {
                headers: {
                    "Content-Type": "application/json",
                },
            }
        );

        const { data: users } = await axios.get(`${process.env.PROXY_GATEWAY}/api/users/a`, {
            headers: {
                Authorization: `Bearer ${response.data.token}`,
                "Content-Type": "application/json",
            },
        });

        console.log(`üë• ${users.length} utilisateur(s) r√©cup√©r√©(s).`);

        for (const user of users) {
            console.log(`\nüîç Traitement : ${user.email}`);

            const derniereReco = await Recommandation.findOne({ user_id: user._id }).sort({ date: -1 });

            if (derniereReco && estDateDuJour(derniereReco.date)) {
                console.log("‚è© Recommandation d√©j√† g√©n√©r√©e aujourd'hui.");
                continue;
            }

            console.log("üìù R√©cup√©ration des posts...");
            const posts = await Post.find({ userId: user._id });

            if (!posts.length) {
                console.log("‚ö†Ô∏è Aucun post pour cet utilisateur.");
                continue;
            }

            const formattedPosts = posts.map(post => {
                return `Texte : ${post.text}\nHashtags : ${post.hashtags?.join(', ') || 'aucun'}\nEngagement : ${post.engagement || 'non pr√©cis√©'}\nDate : ${post.createdAt?.toLocaleDateString() || 'inconnue'}`;
            }).join('\n\n');

            const prompt = `
Voici les posts r√©cup√©r√©s depuis la base de donn√©es avec leurs donn√©es analytiques :
${formattedPosts}

Donne-moi UNE recommandation simple et concr√®te pour am√©liorer ses performances sur les r√©seaux sociaux aujourd'hui.
Ta r√©ponse doit √™tre en texte brut, sans mise en forme (pas de gras, pas de tirets, pas de listes, pas de markdown), en revanche tu peux int√©grer des smiley pour rendre la recommandation conviviale. Ne commence pas par "Voici une recommandation :".
`;

            console.log("üß† Envoi du prompt √† OpenRouter...");
            const contenu = await axios.post(
                "https://openrouter.ai/api/v1/chat/completions",
                {
                    model: "deepseek/deepseek-chat-v3-0324:free",
                    messages: [
                        { role: "system", content: "Tu es un expert en r√©seaux sociaux." },
                        { role: "user", content: prompt }
                    ]
                },
                {
                    headers: {
                        Authorization: `Bearer ${process.env.CLE_API_IA}`,
                        "Content-Type": "application/json",
                        "HTTP-Referer": process.env.PROXY_GATEWAY,
                        "X-Title": "Recommandation R√©seaux Sociaux"
                    }
                }
            );

            const texte = contenu.data.choices[0].message.content;

            console.log("üíæ Sauvegarde de la recommandation...");
            await Recommandation.create({
                user_id: user._id,
                contenu: texte
            });

            console.log(`‚úÖ Recommandation enregistr√©e pour ${user.email}`);
        }

        console.log("\nüéâ [CRON] Recommandations g√©n√©r√©es avec succ√®s !");
    } catch (err) {
        console.error("‚ùå Erreur dans la g√©n√©ration :", err?.response?.data || err.message || err);
    }
});

console.log("‚úÖ Cron job de g√©n√©ration de recommandations d√©marr√© (chaque heure) !");
